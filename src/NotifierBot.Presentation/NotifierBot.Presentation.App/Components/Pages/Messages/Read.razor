@page "/messages/{id}"
@using NotifierBot.Infrastructure.Models.Api
@using NotifierBot.Infrastructure.Maintenance.Exceptions
@using System.Net
@using NotifierBot.Infrastructure.Models.Enums
@inject NotifierBot.Business.Services.DataManagement.IDataManagementFacade DataManager
@inject NavigationManager Nav

<PageTitle>Сообщения</PageTitle>

<MudPaper Class="pa-4">
    <MudButton aria-label="back" Href="/messages/list">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack"></MudIcon>
        &nbsp; &nbsp;
        Перейти к списку сообщений
    </MudButton>
    <MudForm @ref="_form">
        <MudTextField T="long" Label="Идентификатор" Disabled @bind-Value="@_model.Id" For="@(() => _model.Id)"/>
        <MudTextField T="long" Label="Идентификатор отправителя" @bind-Value="@_model.SenderId" For="@(() => _model.SenderId)" />
        <MudTextField T="long" Label="Идентификатор получателя" @bind-Value="@_model.RecipientId" For="@(() => _model.RecipientId)" />
        
        <MudTextField T="string" Label="Текст сообщения" @bind-Value="@_model.Text" For="@(() => _model.Text)" Lines="10" />
        
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudFab HtmlTag="label"
                        Color="Color.Success"
                        Icon="@Icons.Material.Filled.AttachFile"
                        Label="Загрузить файл"
                        for="@context.Id" />
            </ButtonTemplate>
        </MudFileUpload>
        
        @if (_model is { AttachmentType: not null,Attachment: not null })
        {
            @switch (_model.AttachmentType)
            {
                case AttachmentType.PHOTO:
                    <MudItem xs="12" md="8" Class="d-flex justify-center align-center">
                        <MudImage ObjectFit="ObjectFit.Contain" Src="@GetImageSrc()" Elevation="25" Class="rounded-lg"/>
                    </MudItem>
                    break;
                case AttachmentType.FILE:
                    <MudList>
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                            <code>@_model.Attachment.Length bytes</code>
                        </MudListItem>
                    </MudList>
                    break;
            }
        }
        
        <MudTextField T="DateTime" Label="Дата создания" Disabled @bind-Value="@_model.Created" For="@(() => _model.Created)"/>
        <MudTextField T="DateTime" Label="Дата обновления" Disabled @bind-Value="@_model.Updated" For="@(() => _model.Updated)"/>
        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@SaveAsync">
                <MudIcon Icon="@Icons.Material.Filled.Save"></MudIcon>
                &nbsp; &nbsp;
                Сохранить
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    
    [Parameter]
    public string Id { get; set; } = default!;

    private Message _model = null!;
    private MudForm? _form;

    protected override async Task OnInitializedAsync()
    {
        if (!long.TryParse(Id, out var id))
        {
            throw new ErrorException(HttpStatusCode.NotFound, $"Не найдена сущность с идентификатором #{Id}");
        }

        if (id != 0)
        {
            _model = (await DataManager.Messages.ReadAsync(id, CancellationToken.None))!;
        }
        else
        {
            _model = new();
        }

        await base.OnInitializedAsync();
    }

    private async Task SaveAsync()
    {
        if (_model.Id != 0)
        {
            await DataManager.Messages.UpdateAsync(_model, CancellationToken.None);
        }
        else
        {
            await DataManager.Messages.CreateAsync(_model, CancellationToken.None);
        }
        
        Nav.NavigateTo("/messages/list");
    }

    private string GetImageSrc()
    {
        var image= Convert.ToBase64String(_model.Attachment!);
        return $"data:image/jpeg;base64,{image}";
    }
    
    private async Task UploadFiles(IBrowserFile file)
    {
        if (file.Size <= 0)
        {
            return;
        }
        
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        var fileBytes = ms.ToArray();

        _model.Attachment = fileBytes;
        _model.AttachmentType = file.ContentType switch 
        {
            "image/jpeg" => AttachmentType.PHOTO,
            "image/png" => AttachmentType.PHOTO,
            _ => AttachmentType.FILE
        };
    }
}